<!-- views/pamonitoring.ejs.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Monitoring</title>

    <% include ../partials/head %>

    <script src="/angular/angular.js"></script>

    <script src="//angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js"></script>  <!-- for DatePicker -->

    <script src="/angular-spinner/dist/angular-spinner.min.js"></script>

    <script src="/angular-google-chart/ng-google-chart.js"></script>
    <script type="text/javascript" src="//www.google.com/jsapi"></script>


</head>

<script type="text/javascript">
  //-------------------------------------------------------------------------------------
  var angularApp = angular.module('myApp', ['ui.bootstrap', 'angularSpinner']);
  angularApp.controller('getSensorCtrl', ['$scope', '$http', 'usSpinnerService', function ($scope, $http, usSpinnerService) {
    $scope.mSensorList = [];
    $scope.loadingPeriod = 0;  //12h

    //spinner
    //********************************************************************************************************************
    $scope.startSpin = function(){
      usSpinnerService.spin('spinner-1');
    }
    $scope.stopSpin = function(){
      usSpinnerService.stop('spinner-1');
    }


    //********************************************************************************************************************
    $scope.getSensorList = function () {
      console.log("getSensorList!");
      $http({
        method: 'GET',
        url: 'getallsensorparams'
      }).then(function (response) {
        $scope.mSensorList = response.data;
        $scope.selSensor = $scope.mSensorList[4];   //set initial value
        $scope.updateSelectBox();                   //simulate select for initial value
      }, function (error) {
        console.log("getSensorList ERROR: " + error);
      });
    };
    $scope.getSensorList();  //initial data load

    $scope.updateSelectBox = function () {
      let selSensID = $scope.selSensor.id;
      let selSensName = $scope.selSensor.sensor_name;
      let fromD = $scope.fromDate / 1000;
      let toD = $scope.toDate / 1000;
      console.log("updateSelectBox: selSensor[" + selSensID + "] -> " + selSensName);

      $scope.loadingPeriod = (toD - fromD) / 60 / 60;   //in hours
      console.log("selected time range: " + $scope.loadingPeriod + " h");
      loadSensorData(selSensID, selSensName, fromD, toD);
    }


    //********************************************************************************************************************
    // Datepicker Popup (ui.bootstrap.datepickerPopup)

    var fNow = new Date();
    var f1Hour = (new Date()).setHours(fNow.getHours() - 1);
    var f6Hours = (new Date()).setHours(fNow.getHours() - 6);
    var f12Hours = (new Date()).setHours(fNow.getHours() - 12);
    var f24Hours = (new Date()).setDate(fNow.getDate() -1);
    var fLastWeek = (new Date()).setDate(fNow.getDate() -7);
    var fLastMonth = (new Date()).setMonth(fNow.getMonth() - 1);

    console.log("fNow        ------> " + fNow.getTime());
    console.log("f1Hour      ------> " + f1Hour);
    console.log("f6Hours     ------> " + f6Hours);
    console.log("f12Hours    ------> " + f12Hours);
    console.log("f24Hours    ------> " + f24Hours);
    console.log("fLastWeek   ------> " + fLastWeek);
    console.log("fLastMonth  ------> " + fLastMonth);

    $scope.setInitiaDate = function () {
      $scope.fromDate = f1Hour;
      $scope.toDate = fNow.getTime();  //unix timestamp
    };
    $scope.setInitiaDate();

    $scope.f1Hour = function () {$scope.fromDate = f1Hour; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.f6Hours = function () {$scope.fromDate = f6Hours; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.f12Hours = function () {$scope.fromDate = f12Hours; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.f24Hours = function () {$scope.fromDate = f24Hours; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.fLastWeek = function () {$scope.fromDate = fLastWeek; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.fLastMonth = function () {$scope.fromDate = fLastMonth; console.log("fromDate is set to: " + $scope.fromDate)};


    $scope.reloadData = function () {
      $scope.startSpin();
      let selSensID = $scope.selSensor.id;
      let selSensName = $scope.selSensor.sensor_name;
      let fromD = $scope.fromDate / 1000;
      let toD = $scope.toDate / 1000;
      $scope.loadingPeriod = (toD - fromD) / 60 / 60;   //in hours
      console.log("selected time range: " + $scope.loadingPeriod + " h");
      loadSensorData(selSensID, selSensName, fromD, toD);

    };

    $scope.clear = function () {
      $scope.fromDate = null;
      $scope.toDate = null;
    };

    //--------------------------------------------
    $scope.inlineOptions = {
      //customClass: getDayClass,
      minDate: new Date(2017, 9, 1),
      showWeeks: true
    };

    $scope.dateOptions = {
      dateDisabled: disabled,
      formatYear: 'yy',
      maxDate: new Date(),
      minDate: new Date(2017, 9, 1),
      startingDay: 1
    };

    // Disable weekend selection
    //--------------------------------------------
    function disabled(data) {
      var date = data.date,
        mode = data.mode;
      return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
    }

    /*
    $scope.toggleMin = function () {
      $scope.inlineOptions.minDate = $scope.inlineOptions.minDate ? null : new Date(2017, 10, 1);
      $scope.dateOptions.minDate = $scope.inlineOptions.minDate;
    };
    $scope.toggleMin();
    */

    $scope.open1 = function () {
      console.log("open1");
      $scope.popup1.opened = true;
    };

    $scope.open2 = function () {
      console.log("open2")
      $scope.popup2.opened = true;
    };

    $scope.setDate = function (year, month, day) {
      $scope.fromDate = new Date(year, month, day);
    };

    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.format = $scope.formats[2];
    $scope.altInputFormats = ['M!/d!/yyyy'];

    $scope.popup1 = {
      opened: false
    };

    $scope.popup2 = {
      opened: false
    };

    /*
    var yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    var tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    var afterTomorrow = new Date();
    afterTomorrow.setDate(tomorrow.getDate() + 1);
    $scope.events = [
      {
        date: tomorrow,
        status: 'full'
      },
      {
        date: afterTomorrow,
        status: 'partially'
      }
    ];

    function getDayClass(data) {
      var date = data.date,
        mode = data.mode;
      if (mode === 'day') {
        var dayToCheck = new Date(date).setHours(0, 0, 0, 0);

        for (var i = 0; i < $scope.events.length; i++) {
          var currentDay = new Date($scope.events[i].date).setHours(0, 0, 0, 0);

          if (dayToCheck === currentDay) {
            return $scope.events[i].status;
          }
        }
      }

      return '';
    }*/
  }]);  // END - angularApp.controller

  //********************************************************************************************************************
  // CHART PART
  google.load('visualization', '1', {packages: ['controls', 'charteditor']});

  function loadSensorData(sensor_id, sensorName, fromuxdate, touxdate) {
    $.ajax({
      type: 'GET',
      url: '/getsensordatawithrange/' + sensor_id + '/' + fromuxdate + '/' + touxdate,
      success: function (result) {
        console.log("result.length -> " + result.length);
        mSensorData = result;
        angular.element(document.getElementById('moduleHolder')).scope().stopSpin();

        google.setOnLoadCallback(drawData(sensorName));
      }
    });
  };

  function drawData(sensorName) {
    var data = new google.visualization.DataTable();
    //data.addColumn('number', 'X');
    data.addColumn('datetime', 'Date');
    data.addColumn('number', sensorName);
    //data.addColumn('number', 'test soba_2');

    //console.log("current TS: " + new Date().toUTCString());
    console.log("current TS locale: " + new Date().toLocaleString());
    //console.time('Timer name');

    for (var i = 0; i < mSensorData.length; i += 1) {
      let sVal = parseFloat(mSensorData[i].sensor_value);
      if (sVal < 0){ sVal = 0;}
      //console.log("val[" + i + "] -> " + sVal);

      let sTS = parseInt(mSensorData[i].timestamp * 1000);
      let sTSDate = new Date(sTS);
      data.addRow([sTSDate, sVal]);
    }

    var chartOptions = {
      height: 400,
      chartArea: {left: 70, right: 70, top: 50, width: "95%"},
      legend: {position: 'top', alignment: 'end'},
      interpolateNulls: false,
      series: {
        1: {
          type: "line",
          interpolateNulls: false
        }
      },
      hAxis: {
        title: '',
        format: 'HH:mm:ss',
        gridlines: {
          count: 8,
          color: "#8c8c8c"
        },
        baselineColor: '#40cc34',
        textStyle: {
          color: '#01579b',
          fontSize: 18,
          fontName: 'Arial',
          bold: false,
          italic: false
        }
      },
      vAxis: {
        title: 'Temperatura',
        textStyle: {
          color: '#8b5f0a',
          fontSize: 18,
          bold: false
        },
        titleTextStyle: {
          color: '#8b5f0a',
          fontSize: 18,
          bold: true
        },
        minValue: 0,
        viewWindow: {
          min: 0
        },
        gridlines: {
          count: 8,
          color: "#8C8C8C"
        },
        baselineColor: '#222222'
      },
      colors: ['#c53d47', '#31925a'],
      backgroundColor: '#f6f6f6'
    };

    var dash = new google.visualization.Dashboard(document.getElementById('dashboard_div'));

    var control = new google.visualization.ControlWrapper({
      controlType: 'ChartRangeFilter',
      containerId: 'control_div',
      options: {
        filterColumnIndex: 0,
        ui: {
          chartOptions: {
            height: 60,
            width: "95%",
            chartArea: {
              left: 70,
              right: 70,
              width: '90%'
            },
            backgroundColor: '#dfdfdf'
          },
          chartView: {
            columns: [0, 1]
          }
        }
      }
    });

    var chart = new google.visualization.ChartWrapper({
      chartType: 'LineChart',
      containerId: 'chart_div',
    });

    function setOptions(wrapper) {
      wrapper.setOptions(chartOptions);
    }

    setOptions(chart);

    dash.bind([control], [chart]);
    dash.draw(data);
    google.visualization.events.addListener(control, 'statechange', function () {
      var v = control.getState();
      let dateStartStr = v.range.start;
      let dateEndStr = v.range.end;
      document.getElementById('chart_range_span').innerHTML = dateStartStr + '  to  ' + dateEndStr;
      return 0;
    });
  }

</script>

<body id="moduleHolder" ng-app="myApp" ng-controller="getSensorCtrl">
<header>
    <% include ../partials/header %>
</header>

<div class="main_container" style="display: block">
    <span us-spinner="{radius:30, width:8, length: 16}" spinner-key="spinner-1" spinner-on="showSpinner" spinner-start-active="stop"></span>

    <div class="row-eq-height align-items-center">

        <div class="col-md-2">
            <h5>Select sensor to monitor</h5>
            <select class="selectpicker"
                    ng-change="updateSelectBox()"
                    ng-model="selSensor"
                    ng-options="sensor.sensor_name for sensor in mSensorList">
            </select>
        </div>

        <div class="col-md-4">
            <div class="col-md-6">
                <h5>FROM DATE:</h5>
                <p class="input-group">
                    <input type="text"
                           class="form-control"
                           uib-datepicker-popup="{{format}}"
                           ng-model="fromDate"
                           is-open="popup1.opened"
                           datepicker-options="dateOptions"
                           ng-required="true"
                           close-text="Close"
                           close-on-date-selection="true"
                           alt-input-formats="altInputFormats"/>
                    <span class="input-group-btn">
            <button type="button" class="btn btn-default" ng-click="open1()">
                <i class="glyphicon glyphicon-calendar"></i>
            </button>
          </span>
                </p>
            </div>
            <div class="col-md-6">
                <h5>TO DATE:</h5>
                <p class="input-group">
                    <input type="text"
                           class="form-control"
                           uib-datepicker-popup="{{format}}"
                           ng-model="toDate"
                           is-open="popup2.opened"
                           datepicker-options="dateOptions"
                           ng-required="true"
                           close-text="Close"/>
                    <span class="input-group-btn">
            <button type="button" class="btn btn-default" ng-click="open2()">
                <i class="glyphicon glyphicon-calendar"></i>
            </button>
          </span>
                </p>
            </div>

            <div class="col-md-12">
                <button type="button" class="btn btn-sm btn-info" ng-click="f1Hour()">1 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="f6Hours()">6 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="f12Hours()">12 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="f24Hours()">24 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="fLastWeek()">1 week</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="fLastMonth()">1 month</button>
                <h5>time range: {{loadingPeriod}} h</h5>
                <input type="button" ng-click="startSpin()" value="Start spinner" />
                <input type="button" ng-click="stopSpin()" value="Stop spinner" />

            </div>
        </div>

        <div class="col-md-2" style="background-color: #f8f8f8; vertical-align: middle">
            <button type="button" class="btn btn-sm btn-success" ng-click="reloadData()">RELOAD</button>
        </div>
    </div>
    <div class="row">
        <div class="center">
            <div class="col-md-12">
                <!-- <div id="chart_div"></div> -->
                <div id="dashboard_div">
                    <div id="chart_div" style="display: block;"></div>
                    <div id="control_div"></div>
                    <p><span id='chart_range_span'></span></p>
                </div>
            </div>
        </div>
    </div>


</div>


<footer class="container-fluid text-center">
    <% include ../partials/footer %>
</footer>

</body>
</html>

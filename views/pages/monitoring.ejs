<!-- views/pamonitoring.ejs.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Monitoring</title>

    <% include ../partials/head %>

    <script src="/angular/angular.js"></script>

    <script src="//angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.js"></script>  <!-- for DatePicker -->

    <script src="/angular-spinner/dist/angular-spinner.min.js"></script>

    <script src="/angular-google-chart/ng-google-chart.js"></script>
    <script type="text/javascript" src="//www.google.com/jsapi"></script>


</head>

<script type="text/javascript">
  //-------------------------------------------------------------------------------------
  var angularApp = angular.module('myApp', ['ui.bootstrap', 'angularSpinner']);
  angularApp.controller('getSensorCtrl', ['$scope', '$http', 'usSpinnerService', function ($scope, $http, usSpinnerService) {
    $scope.mSensorList = [];        //list of sensors: 100, 101, 102, 103,...
    $scope.loadingPeriod = 0;       //loading time range
    $scope.latestTimestamp = 0;     //latest sensor timestamp

    $scope.setLatestTS = function(latestTS){
      console.log("setLatestTS -> " + latestTS);
      $scope.latestTimestamp = latestTS;
    }

    //spinner
    //********************************************************************************************************************
    $scope.startSpin = function(){
      usSpinnerService.spin('spinner-1');
    }
    $scope.stopSpin = function(){
      usSpinnerService.stop('spinner-1');
    }


    //********************************************************************************************************************
    $scope.getSensorList = function () {
      console.log("getSensorList!");
      $http({
        method: 'GET',
        url: 'getallsensorparams'
      }).then(function (response) {
        $scope.mSensorList = response.data;
        $scope.selSensor = $scope.mSensorList[4];   //set initial value
        $scope.updateSelectBox();                   //simulate select for initial value
      }, function (error) {
        console.log("getSensorList ERROR: " + error);
      });
    };
    $scope.getSensorList();  //initial data load

    $scope.updateSelectBox = function () {
      let selSensID = 0;   //$scope.selSensor.id;           //0 -> all sensors
      let selSensName = $scope.selSensor.sensor_name;
      let fromD = $scope.fromDate / 1000;
      let toD = $scope.toDate / 1000;
      console.log("updateSelectBox: selSensor[" + selSensID + "] -> " + selSensName);

      $scope.loadingPeriod = (toD - fromD) / 60 / 60;   //in hours
      console.log("selected time range: " + $scope.loadingPeriod + " h");
      loadSensorData(selSensID, selSensName, fromD, toD);
    }

    //********************************************************************************************************************
    // Datepicker Popup (ui.bootstrap.datepickerPopup)

    var fNow = new Date();
    var f1Hour = (new Date()).setHours(fNow.getHours() - 1);
    var f6Hours = (new Date()).setHours(fNow.getHours() - 6);
    var f12Hours = (new Date()).setHours(fNow.getHours() - 12);
    var f24Hours = (new Date()).setDate(fNow.getDate() -1);
    var fLastWeek = (new Date()).setDate(fNow.getDate() -7);
    var fLastMonth = (new Date()).setMonth(fNow.getMonth() - 1);

    //console.log("fNow        ------> " + fNow.getTime());
    //console.log("f1Hour      ------> " + f1Hour);
    //console.log("f6Hours     ------> " + f6Hours);
    //console.log("f12Hours    ------> " + f12Hours);
    //console.log("f24Hours    ------> " + f24Hours);
    //console.log("fLastWeek   ------> " + fLastWeek);
    //console.log("fLastMonth  ------> " + fLastMonth);

    $scope.setInitiaDate = function () {
      $scope.fromDate = f1Hour;
      $scope.toDate = fNow.getTime();  //unix timestamp
    };
    $scope.setInitiaDate();

    $scope.f1Hour = function () {$scope.fromDate = f1Hour; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.f6Hours = function () {$scope.fromDate = f6Hours; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.f12Hours = function () {$scope.fromDate = f12Hours; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.f24Hours = function () {$scope.fromDate = f24Hours; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.fLastWeek = function () {$scope.fromDate = fLastWeek; console.log("fromDate is set to: " + $scope.fromDate)};
    $scope.fLastMonth = function () {$scope.fromDate = fLastMonth; console.log("fromDate is set to: " + $scope.fromDate)};


    $scope.reloadData = function () {
      $scope.startSpin();
      let selSensID = 0;  //$scope.selSensor.id;           //0 -> all sensors
      let selSensName = $scope.selSensor.sensor_name;
      let fromD = $scope.fromDate / 1000;
      let toD = $scope.toDate / 1000;
      $scope.loadingPeriod = (toD - fromD) / 60 / 60;   //in hours
      console.log("selected time range: " + $scope.loadingPeriod + " h");
      loadSensorData(selSensID, selSensName, fromD, toD);

    };

    $scope.clear = function () {
      $scope.fromDate = null;
      $scope.toDate = null;
    };

    //--------------------------------------------
    $scope.inlineOptions = {
      //customClass: getDayClass,
      minDate: new Date(2017, 9, 1),
      showWeeks: true
    };

    $scope.dateOptions = {
      dateDisabled: disabled,
      formatYear: 'yy',
      maxDate: new Date(),
      minDate: new Date(2017, 9, 1),
      startingDay: 1
    };

    // Disable weekend selection
    //--------------------------------------------
    function disabled(data) {
      var date = data.date,
        mode = data.mode;
      return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
    }

    $scope.open1 = function () {
      console.log("open1");
      $scope.popup1.opened = true;
    };

    $scope.open2 = function () {
      console.log("open2")
      $scope.popup2.opened = true;
    };

    $scope.setDate = function (year, month, day) {
      $scope.fromDate = new Date(year, month, day);
    };

    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    $scope.format = $scope.formats[2];
    $scope.altInputFormats = ['M!/d!/yyyy'];

    $scope.popup1 = {
      opened: false
    };

    $scope.popup2 = {
      opened: false
    };

  }]);  // END - angularApp.controller

  //********************************************************************************************************************
  // CHART PART
  google.load('visualization', '1', {packages: ['controls', 'charteditor']});

  function loadSensorData(sensor_id, sensorName, fromuxdate, touxdate) {
    $.ajax({
      type: 'GET',
      url: '/getsensordatawithrange/' + sensor_id + '/' + fromuxdate + '/' + touxdate,
      success: function (result) {
        console.log("result.length -> " + result.length);
        mSensorData = result;
        angular.element(document.getElementById('moduleHolder')).scope().stopSpin();

        google.setOnLoadCallback(drawData(sensorName));
      }
    });
  };

  function drawData(sensorName) {
    var data = new google.visualization.DataTable();
    data.addColumn('datetime', 'Date');
    data.addColumn('number', 'puffer_04');
    data.addColumn('number', 'radijator_topla');
    data.addColumn('number', 'puffer_03');
    data.addColumn('number', 'radijator_hladna');
    data.addColumn('number', 'ckp_jezgra');
    data.addColumn('number', 'ckp_pol');
    data.addColumn('number', 'puffer_02');
    data.addColumn('number', 'ckp_pov');
    data.addColumn('number', 'puffer_01');
    data.addColumn('number', 'soba');
    data.addColumn('number', 'vani');
    data.addColumn('number', 'power_cpk');
    data.addColumn('number', 'power_rad');
    //data.addColumn('number', 'test soba_2');

    console.log("current TS locale: " + new Date().toLocaleString());

    //prepare all sensors data for graph
    //---------------------------------------------------------
    var latestTS = 0;
    var s_100 = false;
    var s_101 = false;
    var s_102 = false;
    var s_103 = false;
    var s_104 = false;
    var s_105 = false;
    var s_106 = false;
    var s_107 = false;
    var s_108 = false;
    var s_109 = false;
    var s_110 = false;

    var sVal_100 = 0;
    var sVal_101 = 0;
    var sVal_102 = 0;
    var sVal_103 = 0;
    var sVal_104 = 0;
    var sVal_105 = 0;
    var sVal_106 = 0;
    var sVal_107 = 0;
    var sVal_108 = 0;
    var sVal_109 = 0;
    var sVal_110 = 0;

    for (var i = 0; i < mSensorData.length; i += 1) {

      if (mSensorData[i].sensor_id == "100"){
        var sVal100 = parseFloat(mSensorData[i].sensor_value);
        if (sVal100 < 0){ sVal100 = 0;}
        s_100 = true;
        sVal_100 = sVal100;
      }

      if (mSensorData[i].sensor_id == "101"){
        var sVal101 = parseFloat(mSensorData[i].sensor_value);
        if (sVal101 < 0){ sVal101 = 0;}
        s_101 = true;
        sVal_101 = sVal101;
      }

      if (mSensorData[i].sensor_id == "102"){
        var sVal102 = parseFloat(mSensorData[i].sensor_value);
        if (sVal102 < 0){ sVal102 = 0;}
        s_102 = true;
        sVal_102 = sVal102;
      }

      if (mSensorData[i].sensor_id == "103"){
        var sVal103 = parseFloat(mSensorData[i].sensor_value);
        if (sVal103 < 0){ sVal103 = 0;}
        s_103 = true;
        sVal_103 = sVal103;
      }

      if (mSensorData[i].sensor_id == "104"){
        var sVal104 = parseFloat(mSensorData[i].sensor_value);
        if (sVal104 < 0){ sVal104 = 0;}
        s_104 = true;
        sVal_104 = sVal104;
      }

      if (mSensorData[i].sensor_id == "105"){
        var sVal105 = parseFloat(mSensorData[i].sensor_value);
        if (sVal105 < 0){ sVal105 = 0;}
        s_105 = true;
        sVal_105 = sVal105;
      }

      if (mSensorData[i].sensor_id == "106"){
        var sVal106 = parseFloat(mSensorData[i].sensor_value);
        if (sVal106 < 0){ sVal106 = 0;}
        s_106 = true;
        sVal_106 = sVal106;
      }

      if (mSensorData[i].sensor_id == "107"){
        var sVal107 = parseFloat(mSensorData[i].sensor_value);
        if (sVal107 < 0){ sVal107 = 0;}
        s_107 = true;
        sVal_107 = sVal107;
      }

      if (mSensorData[i].sensor_id == "108"){
        var sVal108 = parseFloat(mSensorData[i].sensor_value);
        if (sVal108 < 0){ sVal108 = 0;}
        s_108 = true;
        sVal_108 = sVal108;
      }

      if (mSensorData[i].sensor_id == "109"){
        var sVal109 = parseFloat(mSensorData[i].sensor_value);
        if (sVal109 < 0){ sVal109 = 0;}
        s_109 = true;
        sVal_109 = sVal109;
      }

      if (mSensorData[i].sensor_id == "110"){
        var sVal110 = parseFloat(mSensorData[i].sensor_value);
        if (sVal110 < 0){ sVal110 = 0;}
        s_110 = true;
        sVal_110 = sVal110;
      }


      // test if all done for timestamp[n]
      if (s_100 && s_101 && s_102 && s_103 && s_104 && s_105 && s_106 && s_107 && s_108 && s_109 && s_110){
        //----------------------------------------------------------
        //extract latest timestamp
        let sTS = parseInt(mSensorData[i].timestamp * 1000);
        if (sTS > latestTS){
          latestTS = sTS;
        }
        let sTSDate = new Date(sTS);

        //----------------------------------------------------------
        //calculate and add power
        //P = Q * Cp * ro * dT;     Q[m3/s], Cp[J/kg°C], ro[kg/m3], dT[T2-T1]
        const Q_ckp = 2.2 / 60 / 60;    //flow -> 1.7 m3/h
        const Q_rad = 1.7 / 60 / 60;    //flow -> 2.2 m3/h
        const Cp = 4200;            //heat capacity of water
        const ro = 1000;            //water density
        const t2_ckp = sVal_105;  //ckp_pol, sID: 105
        const t1_ckp = sVal_107;  //ckp_pov, sID: 107
        const t2_rad = sVal_101;  //rad_pol, sID: 101
        const t1_rad = sVal_103;  //rad_pov, sID: 103
        const dt_ckp = t2_ckp - t1_ckp;
        const dt_rad = t2_rad - t1_rad;
        let valPowerCKP = parseInt(Q_ckp * Cp * ro * dt_ckp / 1000);
        let valPowerRAD = parseInt(Q_rad * Cp * ro * dt_rad / 1000);
        //----------------------------------------------------------

        data.addRow([sTSDate, sVal_100, sVal_101, sVal_102, sVal_103, sVal_104, sVal_105, sVal_106, sVal_107, sVal_108, sVal_109, sVal_110, valPowerCKP, valPowerRAD]);

        s_100 = false;
        s_101 = false;
        s_102 = false;
        s_103 = false;
        s_104 = false;
        s_105 = false;
        s_106 = false;
        s_107 = false;
        s_108 = false;
        s_109 = false;
        s_110 = false;
      }
    }

    //angularApp.$scope.latestTimestamp = latestTS;
    latestTimestampStr = new Date(latestTS).toLocaleString();
    console.log("latestTimestamp: " + latestTimestampStr);
    angular.element(document.getElementById('moduleHolder')).scope().setLatestTS(latestTimestampStr);
    //angularApp.scope().latestTimestamp = latestTS;
    //angular.element(document.getElementById('moduleHolder')).scope().latestTimestamp = latestTS;

    //---------------------------------------------------------
    var chartOptions = {
      height: 400,
      chartArea: {left: 70, right: 70, top: 50, width: "95%"},
      legend: {position: 'top', alignment: 'end'},
      interpolateNulls: false,
      pointSize: 0,
      series: {
        1: {
          type: "line",
          pointShape: 'circle',
          interpolateNulls: false
        }
      },
      hAxis: {
        title: '',
        format: 'HH:mm:ss',
        gridlines: {
          count: 8,
          color: "#8c8c8c"
        },
        baselineColor: '#40cc34',
        textStyle: {
          color: '#01579b',
          fontSize: 18,
          fontName: 'Arial',
          bold: false,
          italic: false
        }
      },
      vAxis: {
        title: 'Temperatura',
        textStyle: {
          color: '#8b5f0a',
          fontSize: 18,
          bold: false
        },
        titleTextStyle: {
          color: '#8b5f0a',
          fontSize: 18,
          bold: true
        },
        minValue: 0,
        viewWindow: {
          min: 0
        },
        gridlines: {
          count: 8,
          color: "#8C8C8C"
        },
        baselineColor: '#222222'
      },
      colors: ['#ff4422', '#ff6644', '#ff9933', '#ccbb33', '#aacc22', '#69d025', '#22ccaa', '#12bdb9', '#4444dd', '#3b0cbd', '#442299', '#4f4f4f', '#1d1d1d'],
      backgroundColor: '#f6f6f6'
    };

    var dash = new google.visualization.Dashboard(document.getElementById('dashboard_div'));

    var control = new google.visualization.ControlWrapper({
      controlType: 'ChartRangeFilter',
      containerId: 'control_div',
      options: {
        filterColumnIndex: 0,
        ui: {
          chartOptions: {
            height: 60,
            width: "95%",
            chartArea: {
              left: 70,
              right: 70,
              width: '90%'
            },
            backgroundColor: '#dfdfdf'
          },
          chartView: {
            columns: [0, 1]
          }
        }
      }
    });

    var chart = new google.visualization.ChartWrapper({
      chartType: 'LineChart',
      containerId: 'chart_div',
    });

    function setOptions(wrapper) {
      wrapper.setOptions(chartOptions);
    }

    setOptions(chart);

    dash.bind([control], [chart]);
    dash.draw(data);
    google.visualization.events.addListener(control, 'statechange', function () {
      var v = control.getState();
      let dateStartStr = v.range.start;
      let dateEndStr = v.range.end;
      document.getElementById('chart_range_span').innerHTML = dateStartStr + '  to  ' + dateEndStr;
      return 0;
    });

    //---------------------------------------------------------

    var toggleSales = document.getElementById("toggleSales");
    var salesHidden = false;
    toggleSales.onclick = function() {
      console.log("toggleSales.onclick");
      salesHidden = !salesHidden;
      //data = new google.visualization.DataTable();
      if(salesHidden){
        data.hideColumns([1]);
      }
      dash.draw(data);

      //----------
    }
  }

</script>

<body id="moduleHolder" ng-app="myApp" ng-controller="getSensorCtrl">
<header>
    <% include ../partials/header %>
</header>

<div class="main_container" style="display: block">
    <span us-spinner="{radius:30, width:8, length: 16}" spinner-key="spinner-1" spinner-on="showSpinner" spinner-start-active="stop"></span>

    <div class="row-eq-height align-items-center">

        <div class="col-md-2">
            <h5>Select sensor to monitor</h5>
            <select class="selectpicker"
                    ng-change="updateSelectBox()"
                    ng-model="selSensor"
                    ng-options="sensor.sensor_name for sensor in mSensorList">
            </select>
            Show points: <input type="checkbox" ng-model="checked" ng-init="checked=true">
            <button type="button" id="toggleSales">Toggle Sales</button>
        </div>

        <div class="col-md-4">
            <div class="col-md-6">
                <h5>FROM DATE:</h5>
                <p class="input-group">
                    <input type="text"
                           class="form-control"
                           uib-datepicker-popup="{{format}}"
                           ng-model="fromDate"
                           is-open="popup1.opened"
                           datepicker-options="dateOptions"
                           ng-required="true"
                           close-text="Close"
                           close-on-date-selection="true"
                           alt-input-formats="altInputFormats"/>
                    <span class="input-group-btn">
            <button type="button" class="btn btn-default" ng-click="open1()">
                <i class="glyphicon glyphicon-calendar"></i>
            </button>
          </span>
                </p>
            </div>
            <div class="col-md-6">
                <h5>TO DATE:</h5>
                <p class="input-group">
                    <input type="text"
                           class="form-control"
                           uib-datepicker-popup="{{format}}"
                           ng-model="toDate"
                           is-open="popup2.opened"
                           datepicker-options="dateOptions"
                           ng-required="true"
                           close-text="Close"/>
                    <span class="input-group-btn">
            <button type="button" class="btn btn-default" ng-click="open2()">
                <i class="glyphicon glyphicon-calendar"></i>
            </button>
          </span>
                </p>
            </div>

            <div class="col-md-12">
                <button type="button" class="btn btn-sm btn-info" ng-click="f1Hour()">1 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="f6Hours()">6 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="f12Hours()">12 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="f24Hours()">24 h</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="fLastWeek()">1 week</button>
                <button type="button" class="btn btn-sm btn-info" ng-click="fLastMonth()">1 month</button>
                <h5>time range: {{loadingPeriod}} h</h5>
                <h5>latest timestamp: {{latestTimestamp}}</h5>

                <!--
                <input type="button" ng-click="startSpin()" value="Start spinner" />
                <input type="button" ng-click="stopSpin()" value="Stop spinner" />
                -->

            </div>
        </div>

        <div class="col-md-2" style="background-color: #f8f8f8; vertical-align: middle">
            <button type="button" class="btn btn-sm btn-success" ng-click="reloadData()">RELOAD</button>
        </div>
    </div>
    <div class="row">
        <div class="center">
            <div class="col-md-12">
                <!-- <div id="chart_div"></div> -->
                <div id="dashboard_div">
                    <div id="chart_div" style="display: block;"></div>
                    <div id="control_div"></div>
                    <p><span id='chart_range_span'></span></p>
                </div>
            </div>
        </div>
    </div>


</div>


<footer class="container-fluid text-center">
    <% include ../partials/footer %>
</footer>

</body>
</html>
